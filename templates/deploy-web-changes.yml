parameters:
  solution: ''
  buildPlatform: ''
  buildConfiguration: ''
  artifactsDirectory: ''
  webAppName: ''
  dotNetCoreRuntime: ''

stages:
- stage: DeployWebChanges
  displayName: 'Deploy Web Changes'
  pool:
      vmImage: 'ubuntu-latest'
  jobs:
  - job: 
    displayName: 'Build'
    steps:
    - task: UseDotNet@2
      displayName: 'Install 3.1 version of .NET Core'
      inputs:
        version: '3.1.x'

    - task: DotNetCoreCLI@2
      displayName: 'Install Entity Framework'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-ef'

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet tools'

    - task: NuGetCommand@2
      displayName: 'Restore solution ${{ parameters.solution }}'
      inputs:
        restoreSolution: ${{ parameters.solution }}

    - task: DotNetCoreCLI@2
      displayName: Build Solution
      inputs:
        command: build
        projects: '${{ parameters.solution }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }}'
  
    - task: DotNetCoreCLI@2
      displayName: 'Execute Unit Tests'
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration ${{ parameters.buildConfiguration }}'

  - job:
    displayName: 'Publish Artifacts'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Publish local artifacts'
      inputs:
        command: publish
        arguments: '--configuration ${{ parameters.buildConfiguration }} --output ${{ parameters.artifactsDirectory }}'
        zipAfterPublish: True

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        PathtoPublish: '${{ parameters.artifactsDirectory }}'
        ArtifactName: 'drop'
        publishLocation: 'Container'

  - job:
    displayName: 'Deploy Web App'
    steps:
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Web App'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: ${{ parameters.azureSubscription }}
        appType: 'webAppLinux'
        WebAppName: ${{ parameters.appServiceName }}
        packageForLinux: '${{ parameters.artifactsDirectory }}/**/*.zip'
        RuntimeStack: ${{ parameters.dotNetCoreRuntime }}    
    
